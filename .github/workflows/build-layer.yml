name: Build AWS Lambda Layers for DuckDB

on:
  workflow_dispatch:

env:
  DUCKDB_VERSION: 1.3.2
  AWS_REGION: eu-west-1
  AWS_REGIONS: ${{ vars.AWS_REGIONS }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}

jobs:
  build-duckdb:
    name: Build DuckDB Lambda Layer for all architectures
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: [x86_64, arm64]

    steps:
      - name: Checkout code
        id: checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        id: setup-qemu
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.architecture == 'x86_64' && 'linux/amd64' || 'linux/arm64' }}

      - name: Build DuckDB
        id: build
        run: |
          docker build --platform ${{ matrix.architecture == 'x86_64' && 'linux/amd64' || 'linux/arm64' }} --build-arg DUCKDB_VERSION=${{ env.DUCKDB_VERSION }} --build-arg ARCHITECTURE=${{ matrix.architecture }} -f ./docker/Dockerfile -t layer-duckdb:latest .

      - name: Extract zip from Docker container
        id: extract-zip
        run: |
          # Create a temporary container
          container_id=$(docker create --platform ${{ matrix.architecture == 'x86_64' && 'linux/amd64' || 'linux/arm64' }} layer-duckdb:latest)

          # Copy the zip file from the container
          docker cp $container_id:/tmp/duckdb.zip ./duckdb-${{ env.DUCKDB_VERSION }}-python-${{ matrix.architecture }}.zip

          # Clean up the container
          docker rm $container_id

      - name: Upload artifact
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: duckdb-${{ env.DUCKDB_VERSION }}-python-${{ matrix.architecture }}
          path: duckdb-${{ env.DUCKDB_VERSION }}-python-${{ matrix.architecture }}.zip

  publish-layer:
    name: Publish Layer to All Regions
    needs: build-duckdb
    runs-on: ubuntu-latest
    outputs:
      layer-version: ${{ steps.publish.outputs.layer-version }}
    strategy:
      matrix:
        architecture: [x86_64, arm64]

    steps:
      - name: Download artifact
        id: download
        uses: actions/download-artifact@v4
        with:
          name: duckdb-${{ env.DUCKDB_VERSION }}-python-${{ matrix.architecture }}

      # Configure AWS credentials
      - name: Configure AWS credentials
        id: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Default region for initial setup

      - name: Publish Lambda Layer to All Regions
        id: publish
        run: |
          # Get AWS regions from environment variable
          IFS=',' read -ra REGIONS <<< "${{ env.AWS_REGIONS }}"

          # Initialize summary
          echo "## Lambda Layer Publication Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Track success/failure
          SUCCESS_COUNT=0
          FAILED_REGIONS=()
          LAYER_VERSION=""

          # Loop through each region
          for region in "${REGIONS[@]}"; do
            echo "Publishing to region: $region"
            
            # Publish the layer
            if layer_version=$(aws lambda publish-layer-version \
              --region $region \
              --layer-name duckdb-python-${{ matrix.architecture }} \
              --description "DuckDB ${{ env.DUCKDB_VERSION }} Python for AWS Lambda (${{ matrix.architecture }})" \
              --zip-file fileb://duckdb-${{ env.DUCKDB_VERSION }}-python-${{ matrix.architecture }}.zip \
              --compatible-runtimes python3.9 python3.10 python3.11 python3.12 python3.13 \
              --compatible-architectures ${{ matrix.architecture }} \
              --query 'Version' \
              --output text 2>/dev/null); then
              
              echo "Published layer version: $layer_version in region $region"
              
              # Store layer version for output (same version across all regions)
              if [ -z "$LAYER_VERSION" ]; then
                LAYER_VERSION=$layer_version
              fi
              
              # Get the layer ARN
              layer_arn=$(aws lambda get-layer-version \
                --region $region \
                --layer-name duckdb-python-${{ matrix.architecture }} \
                --version-number $layer_version \
                --query 'LayerArn' \
                --output text)
              
              # Make the layer public
              aws lambda add-layer-version-permission \
                --region $region \
                --layer-name duckdb-python-${{ matrix.architecture }} \
                --version-number $layer_version \
                --statement-id public-access \
                --action lambda:GetLayerVersion \
                --principal "*" >/dev/null 2>&1 || echo "Could not set public permission for $region (may already exist)"
              
              # Add to summary
              echo "### $region" >> $GITHUB_STEP_SUMMARY
              echo "- **ARN**: \`$layer_arn\`" >> $GITHUB_STEP_SUMMARY
              echo "- **Version**: $layer_version" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            else
              echo "Failed to publish to region: $region"
              FAILED_REGIONS+=($region)
              echo "### $region - FAILED" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Small delay to avoid rate limiting
            sleep 1
          done

          # Set output for layer version
          echo "layer-version=$LAYER_VERSION" >> $GITHUB_OUTPUT

          # Final summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "**Summary**: $SUCCESS_COUNT/${#REGIONS[@]} regions successful" >> $GITHUB_STEP_SUMMARY
          echo "**Layer Name**: duckdb-python-${{ matrix.architecture }}" >> $GITHUB_STEP_SUMMARY
          echo "**DuckDB Version**: ${{ env.DUCKDB_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Architecture**: ${{ matrix.architecture }}" >> $GITHUB_STEP_SUMMARY
          echo "**Layer Version**: $LAYER_VERSION" >> $GITHUB_STEP_SUMMARY

          if [ ${#FAILED_REGIONS[@]} -gt 0 ]; then
            echo "**Failed Regions**: ${FAILED_REGIONS[*]}" >> $GITHUB_STEP_SUMMARY
            echo "Some regions failed. Check the logs for details."
            exit 1
          else
            echo "All regions published successfully!"
          fi

  update-docs:
    name: Update Documentation
    needs: publish-layer
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Update documentations
        run: |
          python scripts/update_docs.py "${{ env.DUCKDB_VERSION }}" "${{ needs.publish-layer.outputs.layer-version }}"

      - uses: stefanzweifel/git-auto-commit-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: "docs(): update documentation with for DuckDB ${DUCKDB_VERSION}"
          branch: "ft/auto-readme"
          commit_user_name: "bengeois"
          commit_user_email: "me@bbourgeois.dev"
          commit_author: bengeois ðŸ¤– <me@bbourgeois.dev>
