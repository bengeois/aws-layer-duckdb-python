name: Build DuckDB Lambda Layer

on:
  workflow_dispatch:

env:
  DUCKDB_VERSION: 1.3.2
  AWS_REGION: eu-west-1
  LAMBDA_ARCHITECTURE: x86_64

jobs:
  build-duckdb-lambda-layer-x86_64:
    name: Build DuckDB Lambda Layer for x86_64 Architecture
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build DuckDB
        run: |
          docker build --build-arg DUCKDB_VERSION=${{ env.DUCKDB_VERSION }} --build-arg LAMBDA_ARCHITECTURE=${{ env.LAMBDA_ARCHITECTURE }} -f ./docker/Dockerfile -t layer-duckdb:latest .

      - name: Extract zip from Docker container
        run: |
          # Create a temporary container
          container_id=$(docker create layer-duckdb:latest)

          # Copy the zip file from the container
          docker cp $container_id:/tmp/duckdb.zip ./duckdb-${{ env.DUCKDB_VERSION }}-python-${{ env.LAMBDA_ARCHITECTURE }}.zip

          # Clean up the container
          docker rm $container_id

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: duckdb-${{ env.DUCKDB_VERSION }}-python-${{ env.LAMBDA_ARCHITECTURE }}
          path: duckdb-${{ env.DUCKDB_VERSION }}-python-${{ env.LAMBDA_ARCHITECTURE }}.zip

  publish-layer:
    name: Publish Layer to All Regions
    needs: build-duckdb-lambda-layer-x86_64
    runs-on: ubuntu-latest

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: duckdb-${{ env.DUCKDB_VERSION }}-python-${{ env.LAMBDA_ARCHITECTURE }}

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Default region for initial setup

      - name: Publish Lambda Layer to All Regions
        run: |
          # Define all AWS regions
          REGIONS=(
            "us-east-1"
            "us-east-2" 
            "us-west-1"
            "us-west-2"
            "af-south-1"
            "ap-east-1"
            "ap-northeast-1"
            "ap-northeast-2"
            "ap-northeast-3"
            "ap-south-1"
            "ap-south-2"
            "ap-southeast-1"
            "ap-southeast-2"
            "ap-southeast-3"
            "ap-southeast-4"
            "ca-central-1"
            "eu-central-1"
            "eu-central-2"
            "eu-north-1"
            "eu-south-1"
            "eu-south-2"
            "eu-west-1"
            "eu-west-2"
            "eu-west-3"
            "il-central-1"
            "me-central-1"
            "me-south-1"
            "sa-east-1"
          )

          # Initialize summary
          echo "## Lambda Layer Publication Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Track success/failure
          SUCCESS_COUNT=0
          FAILED_REGIONS=()

          # Loop through each region
          for region in "${REGIONS[@]}"; do
            echo "Publishing to region: $region"
            
            # Publish the layer
            if layer_version=$(aws lambda publish-layer-version \
              --region $region \
              --layer-name duckdb-python-${{ env.LAMBDA_ARCHITECTURE }} \
              --description "DuckDB ${{ env.DUCKDB_VERSION }} Python for AWS Lambda (${{ env.LAMBDA_ARCHITECTURE }})" \
              --zip-file fileb://duckdb-${{ env.DUCKDB_VERSION }}-python-${{ env.LAMBDA_ARCHITECTURE }}.zip \
              --compatible-runtimes python3.13 \
              --compatible-architectures ${{ env.LAMBDA_ARCHITECTURE }} \
              --query 'Version' \
              --output text 2>/dev/null); then
              
              echo "Published layer version: $layer_version in region $region"
              
              # Get the layer ARN
              layer_arn=$(aws lambda get-layer-version \
                --region $region \
                --layer-name duckdb-python-${{ env.LAMBDA_ARCHITECTURE }} \
                --version-number $layer_version \
                --query 'LayerArn' \
                --output text)
              
              # Make the layer public
              aws lambda add-layer-version-permission \
                --region $region \
                --layer-name duckdb-python-${{ env.LAMBDA_ARCHITECTURE }} \
                --version-number $layer_version \
                --statement-id public-access \
                --action lambda:GetLayerVersion \
                --principal "*" >/dev/null 2>&1 || echo "Could not set public permission for $region (may already exist)"
              
              # Add to summary
              echo "### $region" >> $GITHUB_STEP_SUMMARY
              echo "- **ARN**: \`$layer_arn\`" >> $GITHUB_STEP_SUMMARY
              echo "- **Version**: $layer_version" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            else
              echo "Failed to publish to region: $region"
              FAILED_REGIONS+=($region)
              echo "### $region - FAILED" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Small delay to avoid rate limiting
            sleep 1
          done

          # Final summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "**Summary**: $SUCCESS_COUNT/${#REGIONS[@]} regions successful" >> $GITHUB_STEP_SUMMARY
          echo "**Layer Name**: duckdb-python-${{ env.LAMBDA_ARCHITECTURE }}" >> $GITHUB_STEP_SUMMARY
          echo "**DuckDB Version**: ${{ env.DUCKDB_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Architecture**: ${{ env.LAMBDA_ARCHITECTURE }}" >> $GITHUB_STEP_SUMMARY

          if [ ${#FAILED_REGIONS[@]} -gt 0 ]; then
            echo "**Failed Regions**: ${FAILED_REGIONS[*]}" >> $GITHUB_STEP_SUMMARY
            echo "Some regions failed. Check the logs for details."
            exit 1
          else
            echo "All regions published successfully!"
          fi
