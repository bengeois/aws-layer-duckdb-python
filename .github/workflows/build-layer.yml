name: Build DuckDB Lambda Layer

on:
  workflow_dispatch:

env:
  DUCKDB_VERSION: 1.3.2
  AWS_REGION: eu-west-1

jobs:
  build-duckdb-lambda-layer-x86_64:
    name: Build DuckDB Lambda Layer for x86_64 Architecture
    runs-on: ubuntu-latest
    env:
      LAMBDA_ARCHITECTURE: x86_64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build DuckDB
        run: |
          docker build --build-arg DUCKDB_VERSION=${{ env.DUCKDB_VERSION }} --build-arg LAMBDA_ARCHITECTURE=${{ env.LAMBDA_ARCHITECTURE }} -f ./docker/Dockerfile -t layer-duckdb:latest .

      - name: Extract zip from Docker container
        run: |
          # Create a temporary container
          container_id=$(docker create layer-duckdb:latest)

          # Copy the zip file from the container
          docker cp $container_id:/tmp/duckdb.zip ./duckdb.zip

          # Clean up the container
          docker rm $container_id

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: duckdb-${{ env.DUCKDB_VERSION }}-${{ env.LAMBDA_ARCHITECTURE }}
          path: duckdb.zip

      # - name: Publish Lambda Layer
      #   run: |
      #     # Publish the layer
      #     layer_version=$(aws lambda publish-layer-version \
      #       --layer-name duckdb-python-$(echo ${{ env.DUCKDB_VERSION }} | tr '.' '-') \
      #       --description "DuckDB Python ${{ env.DUCKDB_VERSION }} for AWS Lambda" \
      #       --zip-file fileb://duckdb-${{ env.DUCKDB_VERSION }}-x86_64.zip \
      #       --compatible-runtimes python3.9 python3.10 python3.11 python3.12 python3.13 \
      #       --compatible-architectures x86_64 \
      #       --query 'Version' \
      #       --output text)

      #     echo "Published layer version: $layer_version"

      #     # Get the layer ARN
      #     layer_arn=$(aws lambda get-layer-version \
      #       --layer-name duckdb-python-$(echo ${{ env.DUCKDB_VERSION }} | tr '.' '-') \
      #       --version-number $layer_version \
      #       --query 'LayerArn' \
      #       --output text)

      #     echo "Layer ARN: $layer_arn"

      #     # Make the layer public (optional)
      #     aws lambda add-layer-version-permission \
      #       --layer-name duckdb-python-$(echo ${{ env.DUCKDB_VERSION }} | tr '.' '-') \
      #       --version-number $layer_version \
      #       --statement-id public-access \
      #       --action lambda:GetLayerVersion \
      #       --principal "*" || echo "Layer permission already exists or failed to set"

      #     # Save layer info to summary
      #     echo "## ðŸš€ Lambda Layer Published" >> $GITHUB_STEP_SUMMARY
      #     echo "- **Layer Name**: duckdb-python-$(echo ${{ env.DUCKDB_VERSION }} | tr '.' '-')" >> $GITHUB_STEP_SUMMARY
      #     echo "- **Version**: $layer_version" >> $GITHUB_STEP_SUMMARY
      #     echo "- **ARN**: $layer_arn" >> $GITHUB_STEP_SUMMARY
      #     echo "- **DuckDB Version**: ${{ env.DUCKDB_VERSION }}" >> $GITHUB_STEP_SUMMARY
      #     echo "- **Architecture**: x86_64" >> $GITHUB_STEP_SUMMARY
      #     echo "- **Compatible Runtimes**: python3.9, python3.10, python3.11, python3.12, python3.13" >> $GITHUB_STEP_SUMMARY
